{"ast":null,"code":"import _objectSpread from \"/Users/karamjitsingh/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Container } from 'unstated';\nconst defaultState = {\n  list: [{\n    id: 1,\n    completed: false,\n    inprogress: true,\n    text: 'Read README'\n  }, {\n    id: 2,\n    completed: false,\n    inprogress: true,\n    text: 'Add one todo'\n  }, {\n    id: 3,\n    completed: false,\n    inprogress: true,\n    text: 'Add filters'\n  }, {\n    id: 4,\n    completed: false,\n    inprogress: true,\n    text: 'Add multiple lists'\n  }, {\n    id: 5,\n    completed: false,\n    inprogress: true,\n    text: 'Optional: add tests'\n  }]\n};\n\nclass TodosContainer extends Container {\n  constructor(props) {\n    super(props);\n\n    this.syncProgressList = () => {\n      localStorage.setItem('showProgresslist', JSON.stringify(true));\n      localStorage.setItem('showProgresslist', JSON.stringify(true));\n    };\n\n    this.onCompleteList = () => {\n      localStorage.setItem('showProgresslist', JSON.stringify(false));\n    };\n\n    this.onProgressList = () => {\n      this.syncProgressList(true);\n      this.setState({\n        showProgresslist: true\n      });\n    };\n\n    this.completeList = () => {};\n\n    this.toggleComplete = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const completed = !item.completed;\n      const inprogress = false;\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          completed,\n          inprogress\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    this.createTodo = async text => {\n      await this.setState(state => {\n        const item = {\n          completed: false,\n          inprogress: true,\n          text,\n          id: state.list.length + 1\n        };\n        const list = state.list.concat(item);\n        this.setState({\n          text: ''\n        });\n        this.syncStorage(list);\n      });\n    };\n\n    this.showInput = () => {\n      this.setState({\n        showInput: !this.state.showInput\n      });\n    };\n\n    this.onChangeText = e => {\n      this.setState({\n        text: e\n      });\n    };\n\n    this.onProgress = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const inprogress = true;\n      const completed = false; // We're using await on setState here because this comes from unstated package, not React\n      // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          inprogress,\n          completed\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    !localStorage.getItem('items') && localStorage.setItem('items', JSON.stringify(defaultState.list));\n    const data = localStorage.getItem('items');\n    this.state = {\n      list: JSON.parse(data),\n      showInput: false,\n      text: '',\n      showProgresslist: false,\n      showcompletelist: false\n    };\n  }\n\n  syncStorage(list) {\n    console.log(list, 'list');\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList() {\n    return this.state.list;\n  }\n\n}\n\nexport default TodosContainer;","map":{"version":3,"sources":["/Users/karamjitsingh/Desktop/todo-app/src/store.js"],"names":["Container","defaultState","list","id","completed","inprogress","text","TodosContainer","constructor","props","syncProgressList","localStorage","setItem","JSON","stringify","onCompleteList","onProgressList","setState","showProgresslist","completeList","toggleComplete","item","state","find","i","map","syncStorage","createTodo","length","concat","showInput","onChangeText","e","onProgress","getItem","data","parse","showcompletelist","console","log","getList"],"mappings":"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","sourcesContent":["import { Container } from 'unstated'\n\nconst defaultState = {\n  list: [\n    {\n      id: 1,\n      completed: false,\n      inprogress:true,\n      text: 'Read README'\n    },\n    {\n      id: 2,\n      completed: false,\n      inprogress:true,\n      text: 'Add one todo'\n    },\n    {\n      id: 3,\n      completed: false,\n      inprogress:true,\n      text: 'Add filters'\n    },\n    {\n      id: 4,\n      completed: false,\n      inprogress:true,\n      text: 'Add multiple lists'\n    },\n    {\n      id: 5,\n      completed: false,\n      inprogress:true,\n      text: 'Optional: add tests'\n    }\n  ],\n \n}\n\nclass TodosContainer extends Container {\n  constructor (props) {\n    super(props)\n    !localStorage.getItem('items')&&localStorage.setItem('items', JSON.stringify(defaultState.list))\n    const data = localStorage.getItem('items') \n    this.state = {\n      list:  JSON.parse(data),\n      showInput:false, \n      text:'',\n      showProgresslist:false,\n      showcompletelist:false\n    }    \n  }\n  \n  syncStorage (list) {\n    console.log(list,'list')\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList () {\n    return this.state.list\n  }\n\n  syncProgressList = () => {\n    localStorage.setItem('showProgresslist', JSON.stringify(true));\n    localStorage.setItem('showProgresslist', JSON.stringify(true));\n  }\n  onCompleteList = () =>{\n    localStorage.setItem('showProgresslist', JSON.stringify(false));\n  }\n  onProgressList = () => {\n    this.syncProgressList(true) \n    this.setState({showProgresslist:true})\n }\n\n completeList = () => {\n\n }\n\n  toggleComplete = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const completed = !item.completed\n    const inprogress = false   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          completed,\n          inprogress\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n\n  createTodo = async text => {\n    await this.setState(state => {\n      const item = {\n        completed: false,\n        inprogress:true,\n        text,\n        id: state.list.length + 1\n      }\n      const list = state.list.concat(item)\n      this.setState({text:''})\n\n      this.syncStorage(list)\n    }) \n  }\n \n  showInput = ()=> {\n    this.setState({ showInput:!this.state.showInput})\n  }\n  \n  onChangeText = (e)=> {\n    this.setState({ text:e})\n  }\n\n  onProgress = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const inprogress = true\n    const completed = false\n    // We're using await on setState here because this comes from unstated package, not React\n    // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          inprogress,\n          completed\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n}\n\nexport default TodosContainer\n"]},"metadata":{},"sourceType":"module"}