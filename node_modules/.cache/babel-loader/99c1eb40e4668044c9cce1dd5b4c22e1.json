{"ast":null,"code":"import _objectSpread from \"/Users/karamjitsingh/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Container } from 'unstated';\nconst defaultState = {\n  list: [{\n    id: 1,\n    completed: false,\n    text: 'Read README'\n  }, {\n    id: 2,\n    completed: false,\n    text: 'Add one todo'\n  }, {\n    id: 3,\n    completed: false,\n    text: 'Add filters'\n  }, {\n    id: 4,\n    completed: false,\n    text: 'Add multiple lists'\n  }, {\n    id: 5,\n    completed: false,\n    text: 'Optional: add tests'\n  }],\n  showInput: false\n};\n\nclass TodosContainer extends Container {\n  constructor(props) {\n    super(props);\n\n    this.toggleComplete = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const completed = !item.completed; // We're using await on setState here because this comes from unstated package, not React\n      // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n\n      await this.setState(state => {\n        const list = state.list.map(item => {\n          if (item.id !== id) return item;\n          return _objectSpread({}, item, {\n            completed\n          });\n        });\n        return {\n          list\n        };\n      });\n      this.syncStorage();\n    };\n\n    this.createTodo = async text => {\n      await this.setState(state => {\n        const item = {\n          completed: false,\n          text,\n          id: state.list.length + 1\n        };\n        const list = state.list.concat(item);\n        return {\n          list\n        };\n      });\n      this.syncStorage();\n    };\n\n    this.state = this.readStorage();\n  }\n\n  readStorage() {\n    if (window && window.localStorage) {\n      const state = window.localStorage.getItem('appState');\n\n      if (state) {\n        return JSON.parse(state);\n      }\n    }\n\n    return defaultState;\n  }\n\n  syncStorage() {\n    if (window && window.localStorage) {\n      const state = JSON.stringify(this.state);\n      window.localStorage.setItem('appState', state);\n    }\n  }\n\n  getList() {\n    return this.state.list;\n  }\n\n}\n\nexport default TodosContainer;","map":{"version":3,"sources":["/Users/karamjitsingh/Desktop/todo-app/src/store.js"],"names":["Container","defaultState","list","id","completed","text","showInput","TodosContainer","constructor","props","toggleComplete","item","state","find","i","setState","map","syncStorage","createTodo","length","concat","readStorage","window","localStorage","getItem","JSON","parse","stringify","setItem","getList"],"mappings":"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","sourcesContent":["import { Container } from 'unstated'\n\nconst defaultState = {\n  list: [\n    {\n      id: 1,\n      completed: false,\n      text: 'Read README'\n    },\n    {\n      id: 2,\n      completed: false,\n      text: 'Add one todo'\n    },\n    {\n      id: 3,\n      completed: false,\n      text: 'Add filters'\n    },\n    {\n      id: 4,\n      completed: false,\n      text: 'Add multiple lists'\n    },\n    {\n      id: 5,\n      completed: false,\n      text: 'Optional: add tests'\n    }\n  ],\n  showInput:false\n}\n\nclass TodosContainer extends Container {\n  constructor (props) {\n    super(props)\n\n    this.state = this.readStorage()\n  }\n\n  readStorage () {\n    if (window && window.localStorage) {\n      const state = window.localStorage.getItem('appState')\n      if (state) {\n        return JSON.parse(state)\n      }\n    }\n\n    return defaultState\n  }\n\n  syncStorage () {\n    if (window && window.localStorage) {\n      const state = JSON.stringify(this.state)\n      window.localStorage.setItem('appState', state)\n    }\n  }\n\n  getList () {\n    return this.state.list\n  }\n\n  toggleComplete = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const completed = !item.completed\n\n    // We're using await on setState here because this comes from unstated package, not React\n    // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n    await this.setState(state => {\n      const list = state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          completed\n        }\n      })\n      return { list }\n    })\n\n    this.syncStorage()\n  }\n\n  createTodo = async text => {\n    await this.setState(state => {\n      const item = {\n        completed: false,\n        text,\n        id: state.list.length + 1\n      }\n\n      const list = state.list.concat(item)\n      return { list }\n    })\n\n    this.syncStorage()\n  }\n}\n\nexport default TodosContainer\n"]},"metadata":{},"sourceType":"module"}