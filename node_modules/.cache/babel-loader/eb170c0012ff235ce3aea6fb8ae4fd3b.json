{"ast":null,"code":"import _objectSpread from \"/Users/karamjitsingh/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Container } from 'unstated';\nconst defaultState = {\n  list: [{\n    id: 1,\n    completed: false,\n    inprogress: false,\n    text: 'Read README'\n  }, {\n    id: 2,\n    completed: false,\n    inprogress: false,\n    text: 'Add one todo'\n  }, {\n    id: 3,\n    completed: false,\n    inprogress: false,\n    text: 'Add filters'\n  }, {\n    id: 4,\n    completed: false,\n    inprogress: false,\n    text: 'Add multiple lists'\n  }, {\n    id: 5,\n    completed: false,\n    text: 'Optional: add tests'\n  }]\n};\n\nclass TodosContainer extends Container {\n  constructor(props) {\n    super(props);\n\n    this.syncProgressList = () => {};\n\n    this.inProgressList = () => {};\n\n    this.completeList = () => {};\n\n    this.toggleComplete = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const completed = !item.completed;\n      const inprogress = false;\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          completed,\n          inprogress\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    this.createTodo = async text => {\n      await this.setState(state => {\n        const item = {\n          completed: false,\n          text,\n          id: state.list.length + 1\n        };\n        const list = state.list.concat(item);\n        this.setState({\n          text: ''\n        });\n        this.syncStorage(list);\n      });\n    };\n\n    this.showInput = () => {\n      this.setState({\n        showInput: !this.state.showInput\n      });\n    };\n\n    this.onChangeText = e => {\n      this.setState({\n        text: e\n      });\n    };\n\n    this.onProgress = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const inprogress = true;\n      const completed = false; // We're using await on setState here because this comes from unstated package, not React\n      // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          inprogress,\n          completed\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    !localStorage.getItem('items') && localStorage.setItem('items', JSON.stringify(defaultState.list));\n    const data = localStorage.getItem('items');\n    this.state = {\n      list: JSON.parse(data),\n      showInput: false,\n      text: '',\n      showProgresslist: false,\n      showcompletelist: false\n    };\n  }\n\n  syncStorage(list) {\n    console.log(list, 'list');\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList() {\n    return this.state.list;\n  }\n\n}\n\nexport default TodosContainer;","map":{"version":3,"sources":["/Users/karamjitsingh/Desktop/todo-app/src/store.js"],"names":["Container","defaultState","list","id","completed","inprogress","text","TodosContainer","constructor","props","syncProgressList","inProgressList","completeList","toggleComplete","item","state","find","i","map","setState","syncStorage","createTodo","length","concat","showInput","onChangeText","e","onProgress","localStorage","getItem","setItem","JSON","stringify","data","parse","showProgresslist","showcompletelist","console","log","getList"],"mappings":"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","sourcesContent":["import { Container } from 'unstated'\n\nconst defaultState = {\n  list: [\n    {\n      id: 1,\n      completed: false,\n      inprogress:false,\n      text: 'Read README'\n    },\n    {\n      id: 2,\n      completed: false,\n      inprogress:false,\n      text: 'Add one todo'\n    },\n    {\n      id: 3,\n      completed: false,\n      inprogress:false,\n      text: 'Add filters'\n    },\n    {\n      id: 4,\n      completed: false,\n      inprogress:false,\n      text: 'Add multiple lists'\n    },\n    {\n      id: 5,\n      completed: false,\n      text: 'Optional: add tests'\n    }\n  ],\n \n}\n\nclass TodosContainer extends Container {\n  constructor (props) {\n    super(props)\n    !localStorage.getItem('items')&&localStorage.setItem('items', JSON.stringify(defaultState.list))\n    const data = localStorage.getItem('items') \n    this.state = {\n      list:  JSON.parse(data),\n      showInput:false, \n      text:'',\n      showProgresslist:false,\n      showcompletelist:false\n    }    \n  }\n  \n  syncStorage (list) {\n    console.log(list,'list')\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList () {\n    return this.state.list\n  }\n  syncProgressList = () => {\n\n  }\n \n  inProgressList = () => {\n   \n }\n\n completeList = () => {\n\n }\n\n  toggleComplete = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const completed = !item.completed\n    const inprogress = false   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          completed,\n          inprogress\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n\n  createTodo = async text => {\n    await this.setState(state => {\n      const item = {\n        completed: false,\n        text,\n        id: state.list.length + 1\n      }\n      const list = state.list.concat(item)\n      this.setState({text:''})\n\n      this.syncStorage(list)\n    }) \n  }\n \n  showInput = ()=> {\n    this.setState({ showInput:!this.state.showInput})\n  }\n  \n  onChangeText = (e)=> {\n    this.setState({ text:e})\n  }\n\n  onProgress = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const inprogress = true\n    const completed = false\n    // We're using await on setState here because this comes from unstated package, not React\n    // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          inprogress,\n          completed\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n}\n\nexport default TodosContainer\n"]},"metadata":{},"sourceType":"module"}