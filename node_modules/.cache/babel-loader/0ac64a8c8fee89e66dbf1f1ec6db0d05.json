{"ast":null,"code":"import _objectSpread from \"/Users/karamjitsingh/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Container } from 'unstated';\nconst defaultState = {\n  list: [{\n    id: 1,\n    completed: false,\n    inprogress: false,\n    text: 'Read README'\n  }, {\n    id: 2,\n    completed: false,\n    inprogress: false,\n    text: 'Add one todo'\n  }, {\n    id: 3,\n    completed: false,\n    inprogress: false,\n    text: 'Add filters'\n  }, {\n    id: 4,\n    completed: false,\n    inprogress: false,\n    text: 'Add multiple lists'\n  }, {\n    id: 5,\n    completed: false,\n    text: 'Optional: add tests'\n  }]\n};\n\nclass TodosContainer extends Container {\n  constructor(props) {\n    super(props);\n\n    this.syncProgressList = () => {\n      localStorage.setItem('showProgresslist', JSON.stringify(true));\n    };\n\n    this.onProgressList = () => {\n      this.syncProgressList(true);\n      this.setState({\n        showProgresslist: true\n      });\n    };\n\n    this.completeList = () => {};\n\n    this.toggleComplete = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const completed = !item.completed;\n      const inprogress = false;\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          completed,\n          inprogress\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    this.createTodo = async text => {\n      await this.setState(state => {\n        const item = {\n          completed: false,\n          text,\n          id: state.list.length + 1\n        };\n        const list = state.list.concat(item);\n        this.setState({\n          text: ''\n        });\n        this.syncStorage(list);\n      });\n    };\n\n    this.showInput = () => {\n      this.setState({\n        showInput: !this.state.showInput\n      });\n    };\n\n    this.onChangeText = e => {\n      this.setState({\n        text: e\n      });\n    };\n\n    this.onProgress = async id => {\n      const item = this.state.list.find(i => i.id === id);\n      const inprogress = true;\n      const completed = false; // We're using await on setState here because this comes from unstated package, not React\n      // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n\n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item;\n        return _objectSpread({}, item, {\n          inprogress,\n          completed\n        });\n      });\n      this.setState({\n        list: list\n      });\n      this.syncStorage(list);\n    };\n\n    localStorage.setItem('items', JSON.stringify(defaultState.list));\n    const data = localStorage.getItem('items');\n    this.state = {\n      list: Jlist,\n      showInput: false,\n      text: '',\n      showProgresslist: false,\n      showcompletelist: false\n    };\n  }\n\n  syncStorage(list) {\n    console.log(list, 'list');\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList() {\n    return this.state.list;\n  }\n\n}\n\nexport default TodosContainer;","map":{"version":3,"sources":["/Users/karamjitsingh/Desktop/todo-app/src/store.js"],"names":["Container","defaultState","list","id","completed","inprogress","text","TodosContainer","constructor","props","syncProgressList","localStorage","setItem","JSON","stringify","onProgressList","setState","showProgresslist","completeList","toggleComplete","item","state","find","i","map","syncStorage","createTodo","length","concat","showInput","onChangeText","e","onProgress","data","getItem","Jlist","showcompletelist","console","log","getList"],"mappings":"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","sourcesContent":["import { Container } from 'unstated'\n\nconst defaultState = {\n  list: [\n    {\n      id: 1,\n      completed: false,\n      inprogress:false,\n      text: 'Read README'\n    },\n    {\n      id: 2,\n      completed: false,\n      inprogress:false,\n      text: 'Add one todo'\n    },\n    {\n      id: 3,\n      completed: false,\n      inprogress:false,\n      text: 'Add filters'\n    },\n    {\n      id: 4,\n      completed: false,\n      inprogress:false,\n      text: 'Add multiple lists'\n    },\n    {\n      id: 5,\n      completed: false,\n      text: 'Optional: add tests'\n    }\n  ],\n \n}\n\nclass TodosContainer extends Container {\n  constructor (props) {\n    super(props)\n    localStorage.setItem('items', JSON.stringify(defaultState.list))\n    const data = localStorage.getItem('items') \n    this.state = {\n      list:  Jlist,\n      showInput:false, \n      text:'',\n      showProgresslist:false,\n      showcompletelist:false\n    }    \n  }\n  \n  syncStorage (list) {\n    console.log(list,'list')\n    localStorage.setItem('items', JSON.stringify(list));\n  }\n\n  getList () {\n    return this.state.list\n  }\n\n  syncProgressList = () => {\n    localStorage.setItem('showProgresslist', JSON.stringify(true));\n  }\n \n  onProgressList = () => {\n    this.syncProgressList(true) \n    this.setState({showProgresslist:true})\n }\n\n completeList = () => {\n\n }\n\n  toggleComplete = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const completed = !item.completed\n    const inprogress = false   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          completed,\n          inprogress\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n\n  createTodo = async text => {\n    await this.setState(state => {\n      const item = {\n        completed: false,\n        text,\n        id: state.list.length + 1\n      }\n      const list = state.list.concat(item)\n      this.setState({text:''})\n\n      this.syncStorage(list)\n    }) \n  }\n \n  showInput = ()=> {\n    this.setState({ showInput:!this.state.showInput})\n  }\n  \n  onChangeText = (e)=> {\n    this.setState({ text:e})\n  }\n\n  onProgress = async id => {\n    const item = this.state.list.find(i => i.id === id)\n    const inprogress = true\n    const completed = false\n    // We're using await on setState here because this comes from unstated package, not React\n    // See: https://github.com/jamiebuilds/unstated#introducing-unstated\n   \n      const list = this.state.list.map(item => {\n        if (item.id !== id) return item\n        return {\n          ...item,\n          inprogress,\n          completed\n        }\n    })\n    this.setState({list:list})\n    this.syncStorage(list)   \n  }\n}\n\nexport default TodosContainer\n"]},"metadata":{},"sourceType":"module"}